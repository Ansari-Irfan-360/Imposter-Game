const words = [
  "air",
  "alarm",
  "apricot",
  "apron",
  "arrow",
  "art",
  "atom",
  "avocado",
  "axe",
  "bake",
  "bark",
  "barrel",
  "basket",
  "beard",
  "beet",
  "bell",
  "berry",
  "biscuit",
  "blanket",
  "blossom",
  "bowl",
  "brass",
  "brush",
  "cake",
  "cap",
  "cattle",
  "cherry",
  "chocolate",
  "clap",
  "clay",
  "clutch",
  "cocoa",
  "comb",
  "cone",
  "cooler",
  "cotton",
  "cucumber",
  "cushion",
  "dancer",
  "dewdrop",
  "doughnut",
  "dune",
  "eggplant",
  "elder",
  "elbow",
  "fern",
  "fleece",
  "flour",
  "flute",
  "frypan",
  "gale",
  "garlic",
  "gavel",
  "giant",
  "glacier",
  "gleam",
  "glitter",
  "gourd",
  "grain",
  "grapefruit",
  "gravel",
  "hatch",
  "hay",
  "heat",
  "honeycomb",
  "hose",
  "huddle",
  "icebox",
  "inkling",
  "jam",
  "jewel",
  "jive",
  "jungle",
  "kite",
  "kitchen",
  "knot",
  "lamb",
  "lamp",
  "lava",
  "leak",
  "leek",
  "lilac",
  "lizard",
  "lotion",
  "maze",
  "mop",
  "mushroom",
  "napkin",
  "nectar",
  "nectarine",
  "nest",
  "nugget",
  "oat",
  "orange",
  "ostrich",
  "pail",
  "pan",
  "peach",
  "pear",
  "peas",
  "petal",
  "pie",
  "plum",
  "poppy",
  "potato",
  "quilt",
  "quokka",
  "rattle",
  "reel",
  "reindeer",
  "rice",
  "robin",
  "sack",
  "sail",
  "salad",
  "salmon",
  "scent",
  "scissors",
  "scoop",
  "seed",
  "shears",
  "shoe",
  "silo",
  "skirt",
  "sleeve",
  "sling",
  "soda",
  "spice",
  "spinach",
  "sponge",
  "squash",
  "straw",
  "sugar",
  "taco",
  "tank",
  "tart",
  "tide",
  "tidepool",
  "toaster",
  "tobacco",
  "tome",
  "tornado",
  "tray",
  "treat",
  "tub",
  "tuna",
  "tweezers",
  "vanilla",
  "vinegar",
  "vulture",
  "waddle",
  "walnut",
  "whisk",
  "whistle",
  "whisker",
  "yarn",
  "yoke",
  "zest",
  "zucchini",
  "angel",
  "antler",
  "apartment",
  "arch",
  "ash",
  "asteroid",
  "avalanche",
  "azalea",
  "badge",
  "balcony",
  "banana",
  "bark",
  "basketball",
  "bat",
  "beachball",
  "beetle",
  "berry",
  "biscuit",
  "blackberry",
  "blueberry",
  "bottle",
  "bowl",
  "branch",
  "cactus",
  "calm",
  "candle",
  "canyon",
  "carrot",
  "cereal",
  "chickpea",
  "cob",
  "copper",
  "cowboy",
  "cucumber",
  "daisy",
  "doll",
  "doorbell",
  "dragonfly",
  "dust",
  "egg",
  "eyebrow",
  "fig",
  "flap",
  "flour",
  "foam",
  "frog",
  "fruitcake",
  "germ",
  "gravy",
  "grin",
  "grit",
  "gumdrop",
  "hammock",
  "hen",
  "honey",
  "hops",
  "iceberg",
  "igloo",
  "island",
  "jacket",
  "jellybean",
  "jigsaw",
  "juice",
  "kettle",
  "knack",
  "knuckle",
  "lamb",
  "lighthouse",
  "lime",
  "lizard",
  "loaf",
  "maple",
  "melon",
  "mint",
  "moonlight",
  "moth",
  "nap",
  "needle",
  "nutmeg",
  "orchard",
  "oyster",
  "pancake",
  "pebble",
  "penguin",
  "pepper",
  "pizza",
  "plank",
  "plush",
  "pocket",
  "popcorn",
  "raccoon",
  "rain",
  "ribbon",
  "rock",
  "sage",
  "salmon",
  "scone",
  "seal",
  "sheepdog",
  "shoehorn",
  "snowflake",
  "snowman",
  "sprout",
  "squash",
  "squid",
  "squirrel",
  "sweater",
  "swirl",
  "tangle",
  "tiger",
  "tulip",
  "valve",
  "vortex",
  "waterfall",
  "whale",
  "whisk",
  "wig",
  "wolverine",
  "yogurt",
  "zucchini",
  "baby",
  "balloon",
  "beach",
  "bear",
  "bread",
  "breeze",
  "brother",
  "bubble",
  "butter",
  "button",
  "candy",
  "carpet",
  "carrot",
  "chalk",
  "chicken",
  "circle",
  "clock",
  "cloud",
  "cookie",
  "crayon",
  "cupcake",
  "cushion",
  "dance",
  "dirt",
  "dish",
  "dough",
  "drizzle",
  "feather",
  "finger",
  "flag",
  "floor",
  "flower",
  "foot",
  "game",
  "garden",
  "gate",
  "gift",
  "glove",
  "gold",
  "grain",
  "grass",
  "hat",
  "head",
  "hill",
  "honey",
  "horse",
  "ice",
  "idea",
  "island",
  "jeans",
  "juice",
  "kite",
  "kitten",
  "lamp",
  "leaf",
  "letter",
  "line",
  "lip",
  "love",
  "lunch",
  "map",
  "mask",
  "mirror",
  "mittens",
  "mouse",
  "neck",
  "nest",
  "note",
  "ocean",
  "oven",
  "paint",
  "pancake",
  "paper",
  "path",
  "peach",
  "pear",
  "pen",
  "petal",
  "phone",
  "pillow",
  "pizza",
  "plant",
  "plate",
  "pocket",
  "pond",
  "post",
  "present",
  "pumpkin",
  "puzzle",
  "rain",
  "ribbon",
  "ring",
  "river",
  "road",
  "roof",
  "root",
  "rug",
  "salt",
  "sand",
  "seed",
  "shadow",
  "sheep",
  "shell",
  "shirt",
  "shoe",
  "sister",
  "sky",
  "smile",
  "snow",
  "sock",
  "song",
  "spoon",
  "spring",
  "star",
  "stone",
  "straw",
  "stream",
  "string",
  "sun",
  "table",
  "tank",
  "tent",
  "thread",
  "toast",
  "tooth",
  "toy",
  "tree",
  "tunnel",
  "twig",
  "umbrella",
  "valley",
  "vase",
  "veil",
  "vine",
  "walk",
  "wall",
  "water",
  "wave",
  "wheel",
  "window",
  "wing",
  "wood",
  "wool",
  "yard",
  "yawn",
  "zip",
  "zoo",
  "apple",
  "bag",
  "bench",
  "bell",
  "bird",
  "blanket",
  "branch",
  "bridge",
  "bucket",
  "button",
  "card",
  "ceiling",
  "cheese",
  "chip",
  "clam",
  "coin",
  "corn",
  "crown",
  "cube",
  "curl",
  "daisy",
  "deer",
  "dog",
  "donut",
  "duck",
  "eagle",
  "earth",
  "eel",
  "egg",
  "elbow",
  "fan",
  "fence",
  "fern",
  "fish",
  "flag",
  "foam",
  "fox",
  "friend",
  "frog",
  "fruit",
  "fry",
  "gate",
  "gem",
  "giraffe",
  "glass",
  "glue",
  "goat",
  "goose",
  "gown",
  "grass",
  "green",
  "gum",
  "hall",
  "ham",
  "hand",
  "hat",
  "heart",
  "hen",
  "hill",
  "hippo",
  "hole",
  "home",
  "horn",
  "horse",
  "hose",
  "house",
  "hug",
  "ink",
  "jar",
  "jelly",
  "jewel",
  "jump",
  "key",
  "knee",
  "knot",
  "lace",
  "lamp",
  "lemon",
  "lid",
  "lime",
  "lion",
  "lip",
  "log",
  "mat",
  "milk",
  "moon",
  "mop",
  "mug",
  "nail",
  "napkin",
  "net",
  "nut",
  "oak",
  "oil",
  "owl",
  "pad",
  "paint",
  "palm",
  "paw",
  "pen",
  "pencil",
  "pin",
  "pipe",
  "pit",
  "plum",
  "pocket",
  "pond",
  "pot",
  "rain",
  "rat",
  "rice",
  "rock",
  "roof",
  "rose",
  "rug",
  "sand",
  "scoop",
  "seed",
  "sew",
  "shirt",
  "shoe",
  "shop",
  "sister",
  "soap",
  "sock",
  "spade",
  "spin",
  "spoon",
  "spout",
  "star",
  "stick",
  "stone",
  "stream",
  "stripe",
  "sun",
  "tank",
  "tent",
  "tile",
  "toe",
  "tooth",
  "top",
  "tree",
  "twig",
  "van",
  "vest",
  "vow",
  "walk",
  "wall",
  "watch",
  "water",
  "whale",
  "wheel",
  "wing",
  "wire",
  "wood",
  "wool",
  "yarn",
  "zip",
  "zoo",
  "ant",
  "ball",
  "bear",
  "bed",
  "bike",
  "bird",
  "book",
  "box",
  "bus",
  "cake",
  "cap",
  "cat",
  "chair",
  "cloud",
  "cow",
  "cup",
  "desk",
  "dog",
  "door",
  "egg",
  "fan",
  "fish",
  "flag",
  "fox",
  "frog",
  "glove",
  "goat",
  "gold",
  "gum",
  "hat",
  "hen",
  "hill",
  "hook",
  "jar",
  "jeans",
  "kite",
  "leaf",
  "leg",
  "log",
  "map",
  "mat",
  "milk",
  "net",
  "nut",
  "oak",
  "pen",
  "pot",
  "rag",
  "rat",
  "rock",
  "rug",
  "sun",
  "tape",
  "tub",
  "wall",
  "water",
  "whale",
  "wind",
  "wing",
  "wood",
  "wool",
  "yarn",
];

const WebSocket = require("ws");

const wss = new WebSocket.Server({ port: 8080 });
let rooms = {}; // Object to hold all game rooms and their players

// Function to update player count in a room
const updatePlayerCount = (roomId) => {
  const room = rooms[roomId];
  const playerNames = room.players.map((player) => player.name);
  const message = JSON.stringify({
    type: "playerCount",
    count: room.players.length,
    players: playerNames,
  });
  room.players.forEach((player) => player.ws.send(message));
};

wss.on("connection", (ws) => {
  ws.on("message", (message) => {
    const data = JSON.parse(message);

    if (data.type === "join") {
      const { roomId, playerName } = data;

      // Check if the room already exists or create a new one
      if (!rooms[roomId]) {
        rooms[roomId] = { players: [], admin: null };
        console.log(`New room created: ${roomId}`);
      }
      const room = rooms[roomId];
      const player = { ws, name: playerName, isAdmin: false };
      room.players.push(player);

      // Assign admin status to the first player in the room
      if (room.players.length === 1) {
        player.isAdmin = true;
        room.admin = player;
        ws.send(JSON.stringify({ type: "joined", isAdmin: true }));
      } else {
        ws.send(JSON.stringify({ type: "joined", isAdmin: false }));
      }

      // Notify all players in the room about the updated player count
      updatePlayerCount(roomId);
    }

    if (data.type === "start" && ws === rooms[data.roomId].admin?.ws) {
      let imposterCount = parseInt(data.imposterCount, 10);
      const room = rooms[data.roomId];
      const playersCount = room.players.length;

      // If the admin wants a random number of imposters, pick a random count
      if (data.randomImposter) {
        imposterCount = Math.floor(Math.random() * imposterCount) + 1; // Random number between 1 and the specified max
      }

      // Validate imposter count
      if (imposterCount >= playersCount) {
        ws.send(
          JSON.stringify({
            type: "error",
            message: "Imposter count is too high.",
          })
        );
        return;
      }

      const chosenWord = words[Math.floor(Math.random() * words.length)];
      const imposters = new Set();
      while (imposters.size < imposterCount) {
        const imposterIndex = Math.floor(Math.random() * room.players.length);
        imposters.add(room.players[imposterIndex]);
      }

      // Get names of imposters
      const imposterNames = Array.from(imposters).map((player) => player.name);

      // Send word to all players and reveal other imposters to the imposters
      room.players.forEach((player) => {
        if (imposters.has(player)) {
          player.ws.send(
            JSON.stringify({
              type: "gameStart",
              word: null, // Imposters don't get the word
              imposters: imposterNames, // Reveal other imposters
            })
          );
        } else {
          player.ws.send(
            JSON.stringify({
              type: "gameStart",
              word: chosenWord, // Non-imposters get the word
            })
          );
        }
      });
    }

    if (data.type === "nextGame" && ws === rooms[data.roomId].admin?.ws) {
      const room = rooms[data.roomId];
      let imposterCount = parseInt(data.imposterCount, 10);
      const chosenWord = words[Math.floor(Math.random() * words.length)];

      // If the admin wants a random number of imposters, pick a random count
      if (data.randomImposter) {
        imposterCount = Math.floor(Math.random() * imposterCount) + 1; // Random number between 1 and the specified max
      }

      const imposters = new Set();
      while (imposters.size < imposterCount) {
        const imposterIndex = Math.floor(Math.random() * room.players.length);
        imposters.add(room.players[imposterIndex]);
      }

      const imposterNames = Array.from(imposters).map((player) => player.name);

      // Send the new word and imposter information to all players
      room.players.forEach((player) => {
        if (imposters.has(player)) {
          player.ws.send(
            JSON.stringify({
              type: "gameStart",
              word: null,
              imposters: imposterNames,
            })
          );
        } else {
          player.ws.send(
            JSON.stringify({
              type: "gameStart",
              word: chosenWord,
            })
          );
        }
      });
    }
  });

  ws.on("close", () => {
    // Remove the player from all rooms
    Object.keys(rooms).forEach((roomId) => {
      rooms[roomId].players = rooms[roomId].players.filter(
        (player) => player.ws !== ws
      );

      // If the admin leaves, assign a new admin
      if (ws === rooms[roomId].admin?.ws && rooms[roomId].players.length > 0) {
        rooms[roomId].admin = rooms[roomId].players[0]; // The next player becomes the admin
        rooms[roomId].admin.isAdmin = true;
        rooms[roomId].admin.ws.send(
          JSON.stringify({ type: "joined", isAdmin: true })
        );
      }

      // Update player count and player list for all players in the room
      updatePlayerCount(roomId);
    });
  });
});

console.log("Server Started");
